( set-logic ALL )

; http://cvc4.cs.stanford.edu/wiki/Datatypes
; https://github.com/cvc5/cvc5/blob/main/examples/api/smtlib/relations.smt2

; function from T to T with T = [0..3]^4 * bool * bool
; first argument are the registers (3 numbers, 1 swap register)
; then less than and greater than flag
; function can be cmp, mov, cmovg, cmovl
; each instruction has two arguments (source, destination register)

; (declare-datatype Tripel (mkTripel (X Y Z) ((tripel (first X) (second Y) (third Z))))

; there is Tuple and tuple but it does not offer destructuring (and the python api also uses custom datatypes)
(declare-datatypes ((Triple 3)) 
    ((par (P Q R) ((triple (first P) (second Q) (third R)))))
)


; enum for instructions
(declare-datatype Instruction ((cmp) (mov) (cmovg) (cmovl)))

(define-fun apply 
    (
        ; (i Instruction) 
        ; (reg1 Int) ; 0<=reg1<=3
        ; (reg2 Int) ; 0<=reg2<=3
        (cmd (Triple Instruction Int Int))
        (tup (Triple (Array Int Int) Bool Bool))
    ) 
    (Triple (Array Int Int) Bool Bool)
    ; (arr,lt,gt) = tup
    (let (
            (i (first cmd))
            (reg1 (second cmd))
            (reg2 (third cmd))
            (arr (first tup))
            (lt (second tup))
            (gt (third tup))
        )
    (let (
            (a (select arr reg1)) ; dest
            (b (select arr reg2)) ; src
        )
        (ite (= i cmp)
            (triple arr (< a b) (> a b))
            (ite (= i mov)
                (triple (store arr reg1 b) lt gt)
                (ite (= i cmovg)
                    (ite gt (triple (store arr reg1 b) lt gt) (triple arr lt gt))
                    (ite (= i cmovl)
                        (ite lt (triple (store arr reg1 b) lt gt) (triple arr lt gt))
                        ; error
                        (triple arr lt gt)
                    )
                )
            )
        )
    ))
)

; f on [x,y,z,0,false,false] with x,y,z in [1..3] and distinct
; => [1,2,3,?,?,?]
; 

; first just select the command (instruction and registers)
( synth-fun f_enum
    ; ((tup (Triple (Array Int Int) Bool Bool)) )
    ; ()
    ((i Int))
    (Triple Instruction Int Int)
    ( (Start (Triple Instruction Int Int)) 
      (Command (Triple Instruction Int Int))
      (Reg Int) 
      (Instr Instruction) 
    )
    (
        (Start (Triple Instruction Int Int)
            (
                ; Command
                (ite (= i 0) Command 
                (ite (= i 1) Command 
                (ite (= i 2) Command 
                (ite (= i 3) Command 
                (ite (= i 4) Command 
                (ite (= i 5) Command 
                (ite (= i 6) Command 
                (ite (= i 7) Command 
                (ite (= i 8) Command 
                (ite (= i 9) Command 
                Command
                ))))))))))
            )
        )
        (Command (Triple Instruction Int Int)
            ((triple Instr Reg Reg))
        )
        (Reg Int 
            (0 1 2 3)
        )
        (Instr Instruction
            (cmp mov cmovg cmovl)
        )
    )
)

; then apply it resulting in f
(define-fun f
    (
        (tup (Triple (Array Int Int) Bool Bool))
    )
    (Triple (Array Int Int) Bool Bool)
    (apply (f_enum 10) 
    (apply (f_enum  9) 
    (apply (f_enum  8) 
    (apply (f_enum  7) 
    (apply (f_enum  6) 
    (apply (f_enum  5) 
    (apply (f_enum  4) 
    (apply (f_enum  3) 
    (apply (f_enum  2) 
    (apply (f_enum  1) 
    (apply (f_enum  0) 
    tup
    )))))))))))
)

(declare-var x Int)
(declare-var y Int)
(declare-var z Int)
(declare-var lt Bool)
(declare-var gt Bool)
(declare-var in_array (Array Int Int))
(declare-var out_array (Array Int Int))
(constraint
    (=>
        (and
            (>= x 1)
            (<= x 3)
            (>= y 1)
            (<= y 3)
            (>= z 1)
            (<= z 3)
            (distinct x y)
            (distinct x z)
            (distinct y z)
            (= (select in_array 0) x)
            (= (select in_array 1) y)
            (= (select in_array 2) z)
            (= (select in_array 3) 0)
            (= 
                ; f [x,y,z,0] false false 
                (f (triple in_array false false))
                ; => (out,lt,gt)
                (triple out_array lt gt)
            )
        )
        (and
            (= (select out_array 0) 1)
            (= (select out_array 1) 2)
            (= (select out_array 2) 3)
        )
    )
)


( check-synth )